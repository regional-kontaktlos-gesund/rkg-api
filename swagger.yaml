swagger: "2.0"
info:
  version: "1.0.0"
  title: "RKG API"
host: "rkg-api-602.herokuapp.com"
basePath: "/api"
tags:
- name: "vendor"
  description: "vendor related operations"
- name: "store"
  description: "store related operations"
- name: "order"
  description: "order related operations"
schemes:
- "https"
paths:
  /vendors/signup:
    post:
      tags:
      - "vendor"
      summary: "Create vendor" 
      description: "creates an vendor and sends verification email"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created vendor object"
        required: true
        schema:
          $ref: '#/definitions/Vendor'
      responses:
        200:
          description: OK
  /vendors/verify/{verifyCode}:
    get:
      tags:
      - "vendor"
      summary: "Verify vendor"
      description: "verfication of an vendor"
      produces:
      - "application/json"
      parameters:
      - name: "verifyCode"
        in: "path"
        description: "Code to verify email"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
  /vendors/login:
    get:
      tags:
      - "vendor"
      summary: "Logs vendor into the system"
      produces:
      - "application/json"
      parameters:
      - name: "mail"
        in: "query"
        description: "Mail for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /stores:
    get:
      tags:
      - "store"
      summary: "Get all stores"
      description: ""
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Store"
    post:
      tags:
      - "store"
      summary: "crate a new store"
      description: ""
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created store object"
        required: true
        schema:
          $ref: '#/definitions/Store'
      produces:
      - "application/json"
      responses:
        200:
          description: OK
  /stores/radius:
    get:
      tags:
      - "store"
      summary: "Get all stores around specific position"
      description: ""
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "user position"
        required: true
        schema:
          $ref: '#/definitions/Position'
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Store"
  /stores/{storeID}:
    patch:
      tags:
      - "store"
      summary: "update store information"
      description: ""
      consumes:
      - "application/json"
      parameters:
      - name: "storeID"
        in: "path"
        description: "ID of the store"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "update store object"
        required: true
        schema:
          $ref: '#/definitions/Store'
      produces:
      - "application/json"
      responses:
        200:
          description: OK
    delete:
      tags:
      - "store"
      summary: "delete store"
      description: ""
      consumes:
      - "application/json"
      parameters:
      - name: "storeID"
        in: "path"
        description: "ID of the store"
        required: true
        type: "integer"
        format: "int64"
      produces:
      - "application/json"
      responses:
        200:
          description: OK
  /stores/{storeID}/products:
    get:
      tags:
      - "store"
      summary: "get products of a store"
      description: ""
      consumes:
      - "application/json"
      parameters:
      - name: "storeID"
        in: "path"
        description: "ID of the store"
        required: true
        type: "integer"
        format: "int64"
      produces:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Product'
    post:
      tags:
      - "store"
      summary: "add product to store"
      description: ""
      consumes:
      - "application/json"
      parameters:
      - name: "storeID"
        in: "path"
        description: "ID of the store"
        required: true
        type: "integer"
        format: "int64"
      - name: "body"
        in: "body"
        description: "new product object"
        required: true
        schema:
          $ref: '#/definitions/Product'
      produces:
      - "application/json"
      responses:
        200:
          description: OK
  /stores/{storeID}/products/{productID}:
    patch:
      tags:
      - "store"
      summary: "update product" 
      description: ""
      consumes:
      - "application/json"
      parameters:
      - name: "storeID"
        in: "path"
        description: "ID of the store"
        required: true
        type: "integer"
        format: "int64"
      - name: "productID"
        in: "path"
        description: "ID of the product"
        required: true
        type: "integer"
        format: "int64"
      - name: "body"
        in: "body"
        description: "new product object"
        required: true
        schema:
          $ref: '#/definitions/Product'
      produces:
      - "application/json"
      responses:
        200:
          description: OK
    delete:
      tags:
      - "store"
      summary: "delete product"
      description: ""
      consumes:
      - "application/json"
      parameters:
      - name: "storeID"
        in: "path"
        description: "ID of the store"
        required: true
        type: "integer"
        format: "int64"
      - name: "productID"
        in: "path"
        description: "ID of the product"
        required: true
        type: "integer"
        format: "int64"
      produces:
      - "application/json"
      responses:
        200:
          description: OK
    
    
    
  /orders/{orderID}:
    get:
      tags:
      - "order"
      summary: "get details"
      description: "all information abour an order"
      parameters:
      - name: "orderID"
        in: "path"
        description: "ID of an order"
        required: true
        type: "integer"
        format: "int64"
      produces:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Order'
    
    
definitions:
  Store:
    type: "object"
    properties:
      name:
        type: "string"
      vendor:
        $ref: "#/definitions/Vendor"
      latitude:
        type: "number"
        format: "double"
      longitude:
        type: "number"
        format: "double"
      stripeAccountId:
        type: "string"
      products:
        type: "array"
        items:
          $ref: '#/definitions/Product'
      openungHours:
        type: "array"
        items:
          $ref: "#/definitions/OpeningHour"
      currentlyOpen:
        type: "boolean"
  Vendor:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
  OpeningHour:
    type: "object"
    properties:
      day:
        type: "string"
        enum: ['monday','truesday','wednesday','thirsday','friday','saturday','sunday','holiday']
      from:
        type: "string"
      to:
        type: "string"
  Product:
    type: "object"
    properties:
      name:
        type: "string"
      "type":
        type: "string"
        enum: 
          - "Erdbeere"
          - "Spargel"
      unit:
        type: "string"
        description: "Die Verkaufseinheit, bspw. 250g Schale"
      price:
        type: "number"
        format: "int64"
      stock:
        type: "number"
        format: "int64"
      imageUrl:
        type: "string"
  Order:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/OrderItem"
      store:
        type: "number"
        format: "int64"
        description: "Stand ID wo bestellt wurde"
      code:
        type: "string"
        description: "Abholcode"
      sumTotal:
        type: "number"
        format: "int64"
        description: "Gesamtsumme der Bestellung"
  OrderItem:
    type: "object"
    properties:
      product:
        type: "string"
      amount:
        type: "number"
        format: "int64"
      price:
        type: "number"
        format: "int64"
  Position:
    type: "object"
    properties:
      latitude:
        type: "number"
        format: "double"
      longitude:
        type: "number"
        format: "double"
      radius:
        type: "number"
        format: "int64"
        description: "radius in meter"